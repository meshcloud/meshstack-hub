{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": "tsconfig.json"
      },
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@angular-eslint/recommended"
      ],
      "plugins": [
        "eslint-plugin-import",
        "eslint-plugin-jsdoc",
        "import"
      ],
      "rules": {
        // @angular-eslint
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "mst",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "mst",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/no-output-native": "warn",
        // @typescript-eslint
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "overrides": {
              "constructors": "no-public"
            }
          }
        ],
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": {
              "memberTypes": [
                "public-static-field",
                "protected-static-field",
                "private-static-field",
                "public-decorated-field",
                "public-instance-field",
                "public-abstract-field",
                "protected-decorated-field",
                "protected-instance-field",
                "protected-abstract-field",
                "private-decorated-field",
                "private-instance-field",
                "public-field",
                "instance-field",
                "protected-field",
                "private-field",
                "abstract-field",
                "constructor",
                "public-static-method",
                "protected-static-method",
                "private-static-method",
                "public-method",
                "protected-method",
                "private-method"
              ]
            }
          }
        ],
        "@typescript-eslint/naming-convention": [
          "warn",
          {
            "selector": "variable",
            "format": [
              "camelCase",
              "UPPER_CASE",
              "snake_case",
              "PascalCase"
            ],
            "leadingUnderscore": "allow"
          }
        ],
        "@typescript-eslint/no-empty-function": "warn",
        "@typescript-eslint/no-empty-object-type": "warn",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-non-null-assertion": "warn",
        "@typescript-eslint/no-shadow": [
          "error",
          {
            "hoist": "all"
          }
        ],
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/unified-signatures": "error",
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "args": "all",
            "argsIgnorePattern": "^_",
            "caughtErrors": "all",
            "caughtErrorsIgnorePattern": "^_",
            "destructuredArrayIgnorePattern": "^_",
            "varsIgnorePattern": "^_",
            "ignoreRestSiblings": true
          }
        ],
        "@typescript-eslint/no-non-null-asserted-optional-chain": "warn",
        "@typescript-eslint/no-unsafe-declaration-merging": "warn",
        // TODO: Migrate to ESLint stylistic plugin https://eslint.style/
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/member-delimiter-style": [
          "error",
          {
            "multiline": {
              "delimiter": "semi",
              "requireLast": true
            },
            "singleline": {
              "delimiter": "semi",
              "requireLast": false
            }
          }
        ],
        "@typescript-eslint/semi": [
          "error",
          "always"
        ],
        "@typescript-eslint/type-annotation-spacing": "error",
        "indent": [
          "error",
          2
        ],
        "max-len": [
          "error",
          {
            "code": 120,
            "ignoreStrings": true,
            "ignoreTemplateLiterals": true,
            "ignoreComments": true
          }
        ],
        "no-trailing-spaces": "error",
        "quotes": [
          "error",
          "single",
          {
            "avoidEscape": true
          }
        ],
        // Note: you must disable the base rule as it can report incorrect errors and enable "@typescript-eslint/semi": "error"
        // https://typescript-eslint.io/rules/semi/
        "semi": "off",
        "spaced-comment": [
          "error",
          "always",
          {
            "markers": [
              "/"
            ]
          }
        ],
        // eslint
        "arrow-body-style": "error",
        "dot-notation": "off",
        "eqeqeq": [
          "error",
          "smart"
        ],
        "constructor-super": "error",
        "curly": "error",
        "guard-for-in": "error",
        "no-bitwise": "error",
        "no-caller": "error",
        "no-console": [
          "error",
          {
            "allow": [
              "dir",
              "timeLog",
              "assert",
              "clear",
              "count",
              "countReset",
              "group",
              "groupEnd",
              "table",
              "dirxml",
              "groupCollapsed",
              "Console",
              "profile",
              "profileEnd",
              "timeStamp",
              "context"
            ]
          }
        ],
        "no-debugger": "error",
        "no-empty": "error",
        "no-eval": "error",
        "no-fallthrough": "error",
        "no-new-wrappers": "error",
        "no-restricted-imports": [
          "error",
          {
            "paths": [
              {
                "name": "app/features",
                "message": "Feature modules are not allowed to be imported! Consider using a shared module or use relative imports inside the same feature module."
              },
              "rxjs/Rx",
              "lodash",
              "lodash-es"
            ],
            "patterns": [
              "app/features/*"
            ]
          }
        ],
        "no-restricted-syntax": [
          "error",
          {
            "selector": "CallExpression[callee.name='fdescribe'], CallExpression[callee.name='fit']",
            "message": "Focused tests (fdescribe/fit) are not allowed."
          }
        ],
        // @typescript-eslint/ban-types is deprecated. ban-types itself is removed in typescript-eslint v8. https://typescript-eslint.io/rules/ban-types/
        // TODO: replace with @typescript-eslint/no-restricted-types if we update to v8
        "@typescript-eslint/ban-types": [
          "warn",
          {
            "types": {
              "UntypedFormControl": {
                "message": "Use FormControl instead",
                "suggest": ["FormControl"]
              },
              "UntypedFormGroup": {
                "message": "Use FormGroup instead",
                "suggest": ["FormGroup"]
              },
              "UntypedFormArray": {
                "message": "Use FormArray instead",
                "suggest": ["FormArray"]
              },
              "UntypedFormBuilder": {
                "message": "Use FormBuilder instead",
                "suggest": ["FormBuilder"]
              }
            }
          }
        ],
        // Note: you must disable the base rule as it can report incorrect errors and enable "@typescript-eslint/no-shadow": "error"
        // https://typescript-eslint.io/rules/no-shadow/
        "no-shadow": "off",
        "no-throw-literal": "error",
        "no-undef-init": "error",
        "no-underscore-dangle": "off",
        // Note: you must disable the base rule as it can report incorrect errors and enable "@typescript-eslint/no-unused-expressions": "error"
        // https://typescript-eslint.io/rules/no-unused-expressions/
        "no-unused-expressions": "off",
        // Note: you must disable the base rule as it can report incorrect errors and enable "@typescript-eslint/no-unused-vars": "error"
        // https://typescript-eslint.io/rules/no-unused-vars/
        "no-unused-vars": "off",
        "no-irregular-whitespace": [
          "error",
          {
            "skipStrings": true,
            "skipTemplates": true
          }
        ],
        "prefer-const": "error",
        "radix": "error",
        "sort-imports": [
          "error",
          {
            "ignoreCase": false,
            "ignoreDeclarationSort": true,
            "ignoreMemberSort": false,
            "memberSyntaxSortOrder": [
              "none",
              "all",
              "multiple",
              "single"
            ],
            "allowSeparatedGroups": true
          }
        ],
        "padding-line-between-statements": [
          "error",
          {
            "blankLine": "always",
            "prev": "*",
            "next": "return"
          },
          {
            "blankLine": "always",
            "prev": "*",
            "next": "if"
          },
          {
            "blankLine": "always",
            "prev": "*",
            "next": "for"
          },
          {
            "blankLine": "always",
            "prev": "*",
            "next": "while"
          }
        ],
        "lines-between-class-members": [
          "error",
          "always"
        ],
        "newline-per-chained-call": [
          "error",
          {
            "ignoreChainWithDepth": 1
          }
        ],
        // import
        "import/no-deprecated": "warn",
        "import/no-unresolved": "error",
        "import/order": [
          "error",
          {
            "groups": [
              "builtin",
              "external",
              "internal",
              [
                "sibling",
                "parent"
              ],
              "index",
              "unknown"
            ],
            "newlines-between": "always",
            "alphabetize": {
              "order": "asc",
              "caseInsensitive": true
            }
          }
        ],
        // jsdoc
        "jsdoc/no-types": "error",
        "object-curly-spacing": ["error", "always"]
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended",
        "plugin:@angular-eslint/template/accessibility"
      ],
      "rules": {
        "@angular-eslint/template/no-call-expression": "warn",
        "@angular-eslint/template/no-negated-async": "warn",

        // ESLint Accessibility Keyboard Navigation
        "@angular-eslint/template/no-positive-tabindex": "warn",
        "@angular-eslint/template/no-autofocus": "warn",
        "@angular-eslint/template/mouse-events-have-key-events": "warn",
        "@angular-eslint/template/click-events-have-key-events": "warn",
        "@angular-eslint/template/interactive-supports-focus": "warn",

        // ESLint Accessibility ARIA Rules
        "@angular-eslint/template/valid-aria": "warn",
        "@angular-eslint/template/role-has-required-aria": "warn",

        // ESLint Accessibility HTML Content
        "@angular-eslint/template/alt-text": "warn",
        "@angular-eslint/template/elements-content": "warn",
        "@angular-eslint/template/label-has-associated-control": "warn",
        "@angular-eslint/template/table-scope": "warn",
        "@angular-eslint/template/no-distracting-elements": "warn",
        "@angular-eslint/template/button-has-type": "warn"
      }
    },
    {
      "files": [
        "*.spec.ts"
      ],
      // TODO: Will be enabled in the future.
      // "plugins": [
      //   "jasmine"
      // ],
      // "extends": [
      //   "plugin:jasmine/recommended"
      // ],
      "rules": {
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "off",
        "@typescript-eslint/no-var-requires": "off"
      }
    },
    {
      "files": [
        "*.spec-cy.ts"
      ],
      "rules": {
        "@typescript-eslint/no-unused-expressions": "off"
      }
    }
  ],
  "settings": {
    "import/resolver": {
      "typescript": {
        "project": "./tsconfig.json"
      }
    }
  }
}
